{"version":3,"file":"static/js/801.c6068622.chunk.js","mappings":"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","sources":["webpack://time2fishing/./src/components/FischList/FischList.module.css?536d","components/FischList/FischList.jsx","webpack://time2fishing/./src/components/Weather/Weather.module.css?d867","components/Weather/Weather.jsx","webpack://time2fishing/./src/components/WeatherWeekItem/WeatherWeekItem.module.css?d6a9","components/WeatherWeekItem/WeatherWeekItem.jsx","webpack://time2fishing/./src/components/WeatherWeek/WeatherWeek.module.css?70d4","components/WeatherWeek/WeatherWeek.jsx","webpack://time2fishing/./src/pages/home/home.module.css?cea6","pages/home/home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"flWrap\":\"FischList_flWrap__pTT7g\"};","import { Link, useLocation } from 'react-router-dom';\nimport style from './FischList.module.css';\n\nconst FischList = ({ sublink, tackleArr }) => {\n    const location = useLocation();\n    return (\n        <div className={style.flWrap}>\n            {tackleArr.length > 0 && (\n                <ul>\n                    {tackleArr.map(fish => (\n                        <li key={fish.id}>\n                            <Link\n                                to={`${sublink ? sublink + fish.loc : fish.loc}`}\n                                state={{ from: location }}\n                            >\n                                {fish.name}\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default FischList;","// extracted by mini-css-extract-plugin\nexport default {\"weatherTodayWrap\":\"Weather_weatherTodayWrap__8-RGJ\",\"weatherTodayDescriptionWrap\":\"Weather_weatherTodayDescriptionWrap__9PWk0\",\"weatherTodayHead\":\"Weather_weatherTodayHead__c2Amy\"};","\nimport React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\n\nimport style from './Weather.module.css';\n\n\n\nconst URL = 'https://api.openweathermap.org/data/2.5/weather/';\nconst ICONURL = 'https://openweathermap.org/img/wn/';\nconst KEY = 'd166a591b291530de4f15fa7d5685607';\nconst CityID = 6548737;\n\nconst Weather = () => {\n\n    const [lat, setLat] = useState(51.3144537);\n    const [long, setLong] = useState(12.2908344);\n    /* const [city, setCity] = useState(\"Leipzig.de\"); */\n    const [weatherData, setData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                setLat(position.coords.latitude);\n                setLong(position.coords.longitude);\n            });\n\n            /* await fetch(`${URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${KEY}`) */\n            await fetch(`${URL}?id=${CityID}&units=metric&APPID=${KEY}`)\n                .then(res => res.json())\n                .then(result => {\n                    setData(result)\n                    //console.log(result);\n                });\n        }\n        fetchData();\n    }, [lat, long])\n\n\n\n    return (\n        <div className={style.weatherTodayWrap}>\n\n            {(typeof weatherData.main != 'undefined') ? (\n                <>\n                    <h3 className={style.weatherTodayHead}>Weather in {weatherData.name} today</h3>\n                    <p>{moment().format('dddd')} {moment().subtract(10, 'days').calendar()}</p>\n                    {/* <p>Date: {moment().format('LL')}</p> */}\n                    <p>Temprature: {weatherData.main.temp} &deg;C</p>\n                    <p>Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n                    <p>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n                    <div className={style.weatherTodayDescriptionWrap}>\n                        <p>{weatherData.weather[0].main}</p>\n                        <img src={ICONURL + weatherData.weather[0].icon + \".png\"} alt=\"icon\" />\n                    </div>\n                    <p>Humidity: {weatherData.main.humidity} %</p>\n\n                </>\n            ) : (\n                <div>\n                    <p>Sorry no data from server</p>\n                </div>\n            )}\n\n        </div>\n    );\n};\n\nexport default Weather;","// extracted by mini-css-extract-plugin\nexport default {\"weatherWrap\":\"WeatherWeekItem_weatherWrap__CW0Cc\",\"weatherDescriptionWrap\":\"WeatherWeekItem_weatherDescriptionWrap__P8DFO\",\"weatherWeekItemList\":\"WeatherWeekItem_weatherWeekItemList__XK20Y\"};","import moment from 'moment';\n\nimport style from './WeatherWeekItem.module.css';\n\nconst ICONURL = 'https://openweathermap.org/img/wn/';\n\nconst WeatherWeekItem = ({ weatherArray }) => {\n\n    const ThisDate = moment().format().substring(0, 10);\n    const noTodayArr = weatherArray.filter(value => value.dt_txt.substring(0, 10) !== ThisDate).filter(value => value.dt_txt.substring(11, 13) === \"12\");\n\n    //console.log(\"original Arr \", weatherArray)\n    //console.log(\"original Arr \", noTodayArr)\n    console.log(ThisDate)\n    /*     let dd = new Date(ThisDate);\n        console.log(dd)\n        console.log(dd.getDay()); */\n\n    function DayDate(day) {\n        let res;\n        let thisDay = new Date(day)\n        switch (thisDay.getDay()) {\n            case 0:\n                res = 'неділя';\n                break;\n\n            case 1:\n                res = 'понеділок';\n                break;\n            case 2:\n                res = 'вівторок';\n                break;\n            case 3:\n                res = 'середа';\n                break;\n            case 4:\n                res = 'четвер';\n                break;\n            case 5:\n                res = 'п\\'ятниця';\n                break;\n            case 6:\n                res = 'субота';\n                break;\n            default:\n                console.log(\"Invalid subscription type\");\n        }\n        return res;\n    }\n\n\n\n    return (\n        <>\n            <ul className={style.weatherWeekItemList}>\n                {noTodayArr.map(item => (\n                    <li key={item.dt} >\n                        <h3>{DayDate(item.dt_txt.substring(0, 10))}</h3>\n                        <p>{item.dt_txt.substring(0, 10)}</p>\n                        <p>Temprature: {item.main.temp} &deg;C</p>\n                        <p>Humidity: {item.main.humidity} %</p>\n                        <div className={style.weatherDescriptionWrap}>\n                            <p>{item.weather[0].description}</p>\n                            <img src={ICONURL + item.weather[0].icon + \".png\"} alt=\"icon\" />\n                        </div>\n                        <p>Wind: {item.wind.speed} m/s</p>\n                    </li>\n\n                ))}\n            </ul>\n\n            {/* <p>Temprature: {weatherData.main.temp} &deg;C</p> */}\n            {/* <p>Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p> */}\n            {/* <p>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p> */}\n            {/*   <div className={style.weatherDescriptionWrap}>\n                        <p>{weatherData.weather[0].main}</p>\n                        <img src={ICONURL + weatherData.weather[0].icon + \".png\"} alt=\"icon\" />\n                    </div> */}\n            {/* <p>Humidity: {weatherData.main.humidity} %</p> */}\n            {/*   <p>Day: {moment().format('dddd')}</p> */}\n            {/*  <p>Date: {moment().format('LL')}</p> */}\n        </>\n    );\n};\n\nexport default WeatherWeekItem;","// extracted by mini-css-extract-plugin\nexport default {\"weatherWrap\":\"WeatherWeek_weatherWrap__dwI+P\",\"weatherDescriptionWrap\":\"WeatherWeek_weatherDescriptionWrap__3ygKl\"};","\nimport React, { useEffect, useState } from \"react\";\n\nimport WeatherWeekItem from \"components/WeatherWeekItem/WeatherWeekItem\";\n\nimport style from './WeatherWeek.module.css';\n\n\nconst URL = 'https://api.openweathermap.org/data/2.5/forecast';\n/* const ICONURL = 'https://openweathermap.org/img/wn/'; */\nconst KEY = 'd166a591b291530de4f15fa7d5685607';\n\n\nconst WeatherWeek = () => {\n\n    /*   const [lat, setLat] = useState(55.3144537);\n    const [long, setLong] = useState(12.2908344); */\n    const CityID = 6548737;\n    const [weatherData, setData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(`${URL}?id=${CityID}&lang=ua&appid=${KEY}&units=metric`)\n                .then(res => res.json())\n                .then(result => {\n                    setData(result)\n                    //console.log(\"Weekly result\", result);\n                });\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <div className={style.weatherWrap}>\n\n            {(typeof weatherData.city != 'undefined') ? (\n                <>\n                    <h3>Weather Week in {weatherData.city.name}</h3>\n                    <WeatherWeekItem weatherArray={weatherData.list} />\n                </>\n            ) : (\n                <div>\n                    <p>Sorry no weather data from server</p>\n                </div>\n            )}\n\n        </div>\n    );\n};\n\nexport default WeatherWeek;","// extracted by mini-css-extract-plugin\nexport default {\"homeWrapp\":\"home_homeWrapp__r9n7O\",\"homeWeatherWrapp\":\"home_homeWeatherWrapp__kV8zZ\"};","\nimport FischList from 'components/FischList/FischList';\nimport Weather from 'components/Weather/Weather';\nimport WeatherWeek from 'components/WeatherWeek/WeatherWeek';\nimport style from './home.module.css';\n\nconst Home = ({ tackleArr }) => {\n    const tackleArray = tackleArr\n\n    return (\n        <div className={style.homeWrapp}>\n            <FischList sublink={'fishes/'} tackleArr={tackleArray} />\n            <div className={style.homeWeatherWrapp}>\n                <Weather />\n                <WeatherWeek />\n            </div>\n        </div>\n    );\n};\n\nexport default Home;"],"names":["sublink","tackleArr","location","useLocation","className","style","length","map","fish","to","loc","state","from","name","id","useState","lat","setLat","long","setLong","weatherData","setData","useEffect","fetchData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result","main","moment","format","subtract","calendar","temp","Date","sys","sunrise","toLocaleTimeString","sunset","weather","src","icon","alt","humidity","weatherArray","ThisDate","substring","noTodayArr","filter","value","dt_txt","DayDate","day","getDay","console","log","item","description","wind","speed","dt","city","list","tackleArray"],"sourceRoot":""}